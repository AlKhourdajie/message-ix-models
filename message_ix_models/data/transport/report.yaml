# Reporting configuration for MESSAGEix-Transport
#
# This file only contains a subset of computations, mostly related to
# IAMC-format tables, that can be specified in this static YAML format. For the
# rest, see message_data.model.transport.report.

general:
# Configuration for :func:`check`. Adds a single key, 'transport check', that
# depends on others and returns a :class:`pandas.Series` of :class:`bool`.
- comp: transport_check
  key: transport check
  inputs: [ scenario, ACT:nl-t-yv-va-m-h ]

# Exogenous data
- comp: distance_ldv
  key: distance:nl-driver_type:ldv
  inputs: [ config ]

- comp: distance_nonldv
  key: distance:nl:non-ldv
  inputs: [ config ]

# Demand per capita
- comp: ratio
  key: demand:n-c-y:capita
  inputs: [ demand:n-c-y, population:n-y ]

# Vehicle stocks
- comp: ratio
  key: stock:nl-t-ya:non-ldv
  inputs: [ CAP:nl-t-ya:non-ldv, distance:nl:non-ldv ]
  sums: true

- comp: ratio
  key: stock:nl-t-ya-driver_type:ldv
  inputs: [ CAP:nl-t-ya:ldv, distance:nl-driver_type:ldv ]
  sums: true

- key: transport file path
  comp: make_output_path
  inputs: [ config ]
  args: { name: transport.csv }

- key: transport iamc
  comp: concat
  inputs:
  - _transport 0a::iamc
  - _transport 0b::iamc
  - _transport 0c::iamc
  - _transport 0d::iamc
  - _transport 1::iamc
  - _transport 2a::iamc
  - _transport 2b::iamc
  - _transport 2c::iamc
  - _transport 2d::iamc
  - _transport 2e::iamc
  - _transport 3::iamc
  # Debugging
  - _transport debug ACT::iamc
  - _transport debug CAP::iamc
  - _transport debug CAP_NEW::iamc

- key: transport iamc file
  comp: write_report
  inputs: [ transport iamc, transport file path ]

- key: transport iamc store
  comp: store_ts
  inputs: [ scenario, transport iamc ]

# NB these are currently tailored to produce the variable names expected for the
#    NGFS project
iamc:

# Activity
- variable: _transport 0a
  base: out:nl-t-ya-c:transport
  var: [ "Energy Service|Transportation", t, c ]

- variable: _transport 0b
  base: out:nl-ya-c:transport
  var: [ "Energy Service|Transportation", c ]

- variable: _transport 0c
  base: out:nl-t-ya:transport
  var: [ "Energy Service|Transportation", t ]

- variable: _transport 0d
  base: out:nl-ya:transport
  var: [ "Energy Service|Transportation" ]

# Stock
- variable: _transport 1
  base: stock:nl-t-ya:ldv
  var: [ "Transport|Stock|Road|Passenger|LDV", t ]

# Final energy

# The following are 4 different partial sums of in::transport, in which
# individual technologies are already aggregated to modes
- variable: _transport 2a
  base: in:nl-t-ya-c:transport
  var: [ "Final Energy|Transportation", t, c ]

- variable: _transport 2b
  base: in:nl-ya-c:transport
  var: [ "Final Energy|Transportation", c ]

- variable: _transport 2c
  base: in:nl-t-ya:transport
  var: [ "Final Energy|Transportation", t ]

- variable: _transport 2d
  base: in:nl-ya:transport
  var: [ "Final Energy|Transportation" ]

- variable: _transport 2e
  base: in:nl-t-ya-c:ldv
  var: [ "Final Energy|Transportation|Road|Passenger|LDV", t, c ]

# Emissions using MESSAGEix emission_factor parameter
- variable: _transport 3
  # Auto-sum over dimensions yv, m, h
  base: emi:nl-t-ya-e-gwp metric-e equivalent:gwpe+agg
  var:
  - "Emissions|CO2|Energy|Demand|Transportation|"
  - t
  # Same as in data/report/global.yaml
  - e
  - e equivalent
  - gwp metric

# TODO emissions using legacy relation approach

# For debugging. "ZZZ" is needed because pyam.concat() sorts automatically
- variable: _transport debug ACT
  base: ACT:nl-t-ya
  var: [ "Zdebug   ACT:nl-t-ya", t ]

- variable: _transport debug CAP
  base: CAP:nl-t-ya
  var: [ "Zdebug   CAP:nl-t-ya", t ]

- variable: _transport debug CAP_NEW
  base: CAP_NEW:nl-t-yv
  var: [ "Zdebug   CAP_NEW:nl-t-yv", t ]
