# Reporting configuration for MESSAGEix-Transport
#
# This file only contains a subset of computations, mostly related to
# IAMC-format tables, that can be specified in this static YAML format. For the
# rest, see message_data.model.transport.report.

MESSAGEix-Transport:
  # Set 'true' to include only technologies with "transport" in the name, e.g.
  # if full-resolution reporting of ACT leads to memory issues.
  filter: False

general:
# Configuration for :func:`check`. Adds a single key, 'transport check', that
# depends on others and returns a :class:`pandas.Series` of :class:`bool`.
- key: transport check
  comp: transport_check
  inputs: [ scenario, ACT:nl-t-yv-va-m-h ]

# Exogenous data
- key: distance:nl:non-ldv
  comp: distance_nonldv
  inputs: [ config ]

# Demand per capita
- key: demand:*:capita
  comp: ratio
  inputs: [ demand:n-c-y, population:n-y ]

# Vehicle stocks
- key: CAP:*:non-ldv+units
  comp: apply_units
  inputs: [ CAP:nl-t-ya:non-ldv ]
  # FIXME should not need the extra [vehicle] in the numerator
  args: {units: "v**2 Tm / a"}
  sums: true

- key: CAP:*:ldv+units
  comp: apply_units
  inputs: [ CAP:*:ldv ]
  args: {units: "Mv"}
  sums: true

- key: CAP_NEW:*:ldv+units
  comp: apply_units
  inputs: [ CAP_NEW:*:ldv ]
  args: {units: "Mv"}
  sums: true

# NB these units are correct for final energy only
- key: in:*:transport+units
  comp: apply_units
  inputs: [ in::transport ]
  args: {units: "GWa / a"}
  sums: true

- key: in:*:ldv+units
  comp: apply_units
  inputs: [ in::ldv ]
  args: {units: "GWa / a"}
  sums: true

- key: out:*:transport+units
  comp: apply_units
  inputs: [ out::transport ]
  args: {units: "Tm / a"}
  sums: true

- key: out:*:ldv+units
  comp: apply_units
  inputs: [ out::ldv ]
  args: {units: "Tm / a"}
  sums: true

# Units of ACT are not carried, so must correct here:
# - Add [time]: -1
# - Remove [vehicle]: -1, [distance]: -1
#
# When run together with global.yaml reporting, emi:* is assigned units
# of "Mt / year". Using apply_units() causes these to be *converted* to
# kt/a, i.e. increasing the magnitude; so use assign_units() instead.
- key: emi:*:transport+units
  comp: assign_units
  inputs: [ emi::transport ]
  args: {units: "kt / a"}
  sums: true

# Concatenate IAMC-format tables
- key: transport::iamc
  comp: concat
  inputs:
  - transport activity::iamc
  - transport stock::iamc
  - transport sales::iamc
  - transport fe::iamc
  - transport fe ldv::iamc
  # Temporarily disabled for NAVIGATE
  # - transport emi 0::iamc
  # - transport emi 1::iamc
  # For debugging
  # - transport debug ACT::iamc
  # - transport debug CAP::iamc
  # - transport debug CAP_NEW::iamc

# Groups of keys for re-use
_iamc formats:
  # Units for final energy. This *exact* value (and not e.g. "EJ / year") is required
  # for the legacy reporting to properly handle the result.
  fe_unit: &fe_unit
    unit: EJ/yr
  emi_unit: &emi_unit
    unit: Mt/yr

# NB these are currently tailored to produce the variable names expected for the
#    NGFS project
iamc:
- variable: transport activity
  base: out:nl-t-ya-c:transport+units
  var: [ "Energy Service|Transportation", t, c ]
  sums: ["c", "t", "c-t"]

- variable: transport stock
  base: CAP:nl-t-ya:ldv+units
  var: [ "Transport|Stock|Road|Passenger|LDV", t ]
  unit: Mvehicle

- variable: transport sales
  base: CAP_NEW:nl-t-yv:ldv+units
  var: [ "Transport|Sales|Road|Passenger|LDV", t ]
  unit: Mvehicle

# Final energy

# The following are 4 different partial sums of in::transport, in which
# individual technologies are already aggregated to modes
- variable: transport fe
  base: in:nl-t-ya-c:transport+units
  var: [ "Final Energy|Transportation", t, c ]
  sums: ["c", "t", "c-t"]
  <<: *fe_unit

- variable: transport fe ldv
  base: in:nl-t-ya-c:ldv+units
  var: [ "Final Energy|Transportation|Road|Passenger|LDV", t, c ]
  <<: *fe_unit

# Emissions using MESSAGEix emission_factor parameter
- variable: transport emi 0
  # Auto-sum over dimensions yv, m, h
  base: emi:nl-t-ya-e-gwp metric-e equivalent:gwpe+agg
  # Same as in data/report/global.yaml
  var: [ "Emissions|CO2|Energy|Demand|Transportation", t, e, e equivalent, gwp metric ]

- variable: transport emi 1
  base: emi:nl-t-ya-e:transport+units
  var: [ "Emissions", e, "Energy|Demand|Transportation", t]
  sums: ["t"]
  <<: *emi_unit

# For debugging
- variable: transport debug ACT
  base: ACT:nl-t-ya
  var: [ "(debug) ACT:nl-t-ya", t ]

- variable: transport debug CAP
  base: CAP:nl-t-ya
  var: [ "(debug) CAP:nl-t-ya", t ]

- variable: transport debug CAP_NEW
  base: CAP_NEW:nl-t-yv
  var: [ "(debug) CAP_NEW:nl-t-yv", t ]
